/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dewantaradb;

/**
 *
 * @author MogaTaufiq
 */
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;

public class Dewantara extends javax.swing.JFrame {
    private static final String JDBC_URL = "jdbc:sqlserver://localhost:1433;encrypt=true; trustServerCertificate=true;databaseName=Dewantara";
    private static final String USER = "sa";
    private static final String PASSWORD = "reallyStrongPwd123"; 
    
    DetailDewantara DetailFrame = new DetailDewantara();    
    DetailOrangTua DetailOrtu = new DetailOrangTua();
    DetailTransaksi DetailTransaksi = new DetailTransaksi();
    EditSiswa EditSiswa = new EditSiswa();
    EditOrtu EditOrtu = new EditOrtu();
    NewSIswa createSiswa = new NewSIswa();
    NewTransaksi createTransaksi = new NewTransaksi();
    
    public void setModel(DefaultTableModel model) {
        table.setModel(model);
    }


    /**
     * Creates new form Dewantara
     */
    public Dewantara() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        search = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        edit = new javax.swing.JButton();
        view = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        create = new javax.swing.JButton();
        filter = new javax.swing.JLabel();
        daftarUlang = new javax.swing.JRadioButton();
        pendaftaran = new javax.swing.JRadioButton();
        spp = new javax.swing.JRadioButton();
        buku = new javax.swing.JRadioButton();
        seragam = new javax.swing.JRadioButton();
        apply = new javax.swing.JButton();
        clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(210, 227, 200));

        jLabel1.setFont(new java.awt.Font("SF Pro Display", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(134, 156, 109));
        jLabel1.setText("Dewantara");

        search.setFont(new java.awt.Font("SF Pro Text", 0, 12)); // NOI18N
        search.setText("search here");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("SF Pro Display", 1, 10)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("SF Pro Display", 0, 12)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pilih", "Siswa", "Orangtua", "Transaksi" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        table.setFont(new java.awt.Font("SF Pro Display", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "NIS", "Nama", "Gender"
            }
        ));
        jScrollPane1.setViewportView(table);

        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        refresh.setText("Refresh");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        filter.setFont(new java.awt.Font("SF Pro", 1, 12)); // NOI18N
        filter.setText("Filter:");

        daftarUlang.setFont(new java.awt.Font("SF Pro", 0, 12)); // NOI18N
        daftarUlang.setText("Daftar Ulang");
        daftarUlang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                daftarUlangActionPerformed(evt);
            }
        });

        pendaftaran.setFont(new java.awt.Font("SF Pro", 0, 12)); // NOI18N
        pendaftaran.setText("Pendaftaran");
        pendaftaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pendaftaranActionPerformed(evt);
            }
        });

        spp.setFont(new java.awt.Font("SF Pro", 0, 12)); // NOI18N
        spp.setText("SPP");
        spp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sppActionPerformed(evt);
            }
        });

        buku.setFont(new java.awt.Font("SF Pro", 0, 12)); // NOI18N
        buku.setText("Buku");
        buku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bukuActionPerformed(evt);
            }
        });

        seragam.setFont(new java.awt.Font("SF Pro", 0, 12)); // NOI18N
        seragam.setText("Seragam");
        seragam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seragamActionPerformed(evt);
            }
        });

        apply.setText("Apply");
        apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 627, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filter)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(view, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(create, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                    .addComponent(pendaftaran)
                    .addComponent(daftarUlang)
                    .addComponent(spp)
                    .addComponent(buku)
                    .addComponent(seragam)
                    .addComponent(apply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(71, 71, 71))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(347, 347, 347))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(create)
                        .addGap(18, 18, 18)
                        .addComponent(view)
                        .addGap(18, 18, 18)
                        .addComponent(delete)
                        .addGap(18, 18, 18)
                        .addComponent(edit)
                        .addGap(18, 18, 18)
                        .addComponent(refresh)
                        .addGap(18, 18, 18)
                        .addComponent(filter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pendaftaran)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(daftarUlang)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buku)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(seragam)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(apply)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clear))
                    .addComponent(jScrollPane1))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String keyword = search.getText();
        
        String selectedOption = jComboBox1.getSelectedItem().toString();
        switch (selectedOption) {
            case "Siswa" -> {
             searchAndDisplaySiswa(keyword);
        }
            case "Orangtua" -> {
             searchAndDisplayOrtu(keyword);
        }
            case "Transaksi" -> {
             searchAndDisplayTransaksi(keyword);
          }
        }
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        String selectedOption = jComboBox1.getSelectedItem().toString();
        switch (selectedOption) {
            case "Siswa" -> {
            int selectedRow = table.getSelectedRow();

            if (selectedRow != -1) {
            String nis = table.getValueAt(selectedRow, 0).toString();

            fetchDataFromSiswaAndDisplayInEditFrame(nis);

            EditSiswa.setVisible(true);
            } else {
            JOptionPane.showMessageDialog(this, "Pilih baris untuk diedit", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
        }
            case "Orangtua" -> {
            int selectedRow = table.getSelectedRow();

            if (selectedRow != -1) {
            int id = (int) table.getValueAt(selectedRow, 0);

            fetchDataFromOrtuAndDisplayInEditFrame(id);

            EditOrtu.setVisible(true);
            } else {
            JOptionPane.showMessageDialog(this, "Pilih baris untuk diedit", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
        }
            case "Transaksi" -> {
                JOptionPane.showMessageDialog(this, "Tidak bisa edit Transaksi", "Peringatan", JOptionPane.WARNING_MESSAGE);
            
          }
        }
        
        
    }//GEN-LAST:event_editActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        String selectedOption = jComboBox1.getSelectedItem().toString();
        switch (selectedOption) {
            case "Siswa" -> {
            int selectedRow = table.getSelectedRow();

            if (selectedRow != -1) {
                String nisToDelete = table.getValueAt(selectedRow, 0).toString();

                deleteSiswaFromDatabase(nisToDelete);
                ((DefaultTableModel) table.getModel()).removeRow(selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "Pilih baris untuk dihapus", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
        }
            case "Orangtua" -> {
            int selectedRow = table.getSelectedRow();

            if (selectedRow != -1) {
                int idToDelete = (int) table.getValueAt(selectedRow, 0);

                deleteOrangTuaFromDatabase(idToDelete);
                ((DefaultTableModel) table.getModel()).removeRow(selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "Pilih baris untuk dihapus", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
        }
            case "Transaksi" -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow != -1) {
                int noTransaksi = (int) table.getValueAt(selectedRow, 0);

                deleteTransaksiFromDatabase(noTransaksi);
                ((DefaultTableModel) table.getModel()).removeRow(selectedRow);
            } else {
                JOptionPane.showMessageDialog(this, "Pilih baris untuk dihapus", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
          }
        }
        
    }//GEN-LAST:event_deleteActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
        String selectedOption = jComboBox1.getSelectedItem().toString();
        switch (selectedOption) {
            case "Siswa" -> {
            int selectedRow = table.getSelectedRow();

            if (selectedRow != -1) {
            String nis = table.getValueAt(selectedRow, 0).toString();

            fetchDataFromSiswaAndDisplayInDetailFrame(nis);

            DetailFrame.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Pilih baris untuk dilihat", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
        }
            case "Orangtua" -> {
            int selectedRow = table.getSelectedRow();

            if (selectedRow != -1) {
            int id = (int) table.getValueAt(selectedRow, 0);

            fetchDataFromOrtuAndDisplayInDetailFrame(id);

            DetailOrtu.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Pilih baris untuk dilihat", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
        }
            case "Transaksi" -> {
            int selectedRow = table.getSelectedRow();

            if (selectedRow != -1) {
            int noTransaksi = (int) table.getValueAt(selectedRow, 0);

            fetchKeteranganTransaksiAndDisplayInDetailTransaksiFrame(noTransaksi);

            DetailTransaksi.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Pilih baris untuk dilihat", "Peringatan", JOptionPane.WARNING_MESSAGE);
            }
          }
        }
        
    }//GEN-LAST:event_viewActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
    String selectedOption = jComboBox1.getSelectedItem().toString();

        switch (selectedOption) {
            case "Siswa" -> {
                try {
                displaySiswaData();
                refresh.setVisible(true);
                edit.setVisible(true);
                create.setVisible(true);
                pendaftaran.setVisible(true);                
                spp.setVisible(true);
                buku.setVisible(true);
                daftarUlang.setVisible(true);
                seragam.setVisible(true);
                apply.setVisible(true);
                clear.setVisible(true);                
                filter.setVisible(true);

                } catch (SQLException ex) {
                    Logger.getLogger(Dewantara.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case "Orangtua" -> {
                try {
                displayOrangTuaData();
                create.setVisible(false);
                refresh.setVisible(true);
                edit.setVisible(true);
                pendaftaran.setVisible(false);                
                spp.setVisible(false);
                buku.setVisible(false);
                daftarUlang.setVisible(false);
                seragam.setVisible(false);
                apply.setVisible(false);
                clear.setVisible(false);
                filter.setVisible(false);
                } catch (SQLException ex) {
                    Logger.getLogger(Dewantara.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case "Transaksi" -> {
                try {
                displayTransaksiData();
                create.setVisible(true);
                refresh.setVisible(true);
                edit.setVisible(false);
                pendaftaran.setVisible(false);                
                spp.setVisible(false);
                buku.setVisible(false);
                daftarUlang.setVisible(false);
                seragam.setVisible(false);
                apply.setVisible(false);
                clear.setVisible(false);
                filter.setVisible(false);
                } catch (SQLException ex) {
                    Logger.getLogger(Dewantara.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        String selectedOption = jComboBox1.getSelectedItem().toString();
       
        search.setText("");

        switch (selectedOption) {
            case "Siswa" -> {
            try {
                displaySiswaData();
                spp.setSelected(false);
                pendaftaran.setSelected(false);
                daftarUlang.setSelected(false);
                buku.setSelected(false);
                seragam.setSelected(false);
            } catch (SQLException ex) {
                Logger.getLogger(Dewantara.class.getName()).log(Level.SEVERE, null, ex);
            }
            }   
            case "Orangtua" -> {
                try {
                displayOrangTuaData();
                } catch (SQLException ex) {
                    Logger.getLogger(Dewantara.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case "Transaksi" -> {
                try {
                displayTransaksiData();
                } catch (SQLException ex) {
                    Logger.getLogger(Dewantara.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
      }
        
    }//GEN-LAST:event_refreshActionPerformed

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        String selectedOption = jComboBox1.getSelectedItem().toString();

        switch (selectedOption) {
            case "Siswa" -> {
               createSiswa.setVisible(true);
            }   
            case "Orangtua" -> {
            }
            case "Transaksi" -> {
                createTransaksi.setVisible(true);
            }
      }
        
    }//GEN-LAST:event_createActionPerformed

    private void pendaftaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pendaftaranActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pendaftaranActionPerformed

    private void applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyActionPerformed
        filteringDisplaySiswa();
    }//GEN-LAST:event_applyActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        spp.setSelected(false);
        pendaftaran.setSelected(false);
        daftarUlang.setSelected(false);
        buku.setSelected(false);
        seragam.setSelected(false);

    }//GEN-LAST:event_clearActionPerformed

    private void sppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sppActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sppActionPerformed

    private void daftarUlangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_daftarUlangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_daftarUlangActionPerformed

    private void bukuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bukuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bukuActionPerformed

    private void seragamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seragamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seragamActionPerformed

    /**
     * @param args the command line arguments
     */
    class NonEditableTableModel extends DefaultTableModel {
    @Override
    public boolean isCellEditable(int row, int column) {
        // Tidak mengizinkan pengeditan sel
        return false;
    }
}
    
private void filteringDisplaySiswa() {
    
    List<String> selectedCheckboxes = new ArrayList<>();

    if (pendaftaran.isSelected()) {
        selectedCheckboxes.add("'Pendaftaran'");
    }
    if (spp.isSelected()) {
        selectedCheckboxes.add("'SPP'");
    }
    if (daftarUlang.isSelected()) {
        selectedCheckboxes.add("'Daftar Ulang'");
    }
    if (buku.isSelected()) {
        selectedCheckboxes.add("'Buku'");
    }
    if (seragam.isSelected()) {
        selectedCheckboxes.add("'Seragam'");
    }

    if (selectedCheckboxes.isEmpty()) {
        try {
            displaySiswaData();
        } catch (SQLException ex) {
            Logger.getLogger(Dewantara.class.getName()).log(Level.SEVERE, null, ex);
        }
    } else {
        // Perform the filtering based on selected checkboxes
        try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
            String query = "SELECT S.NIS, S.Nama, S.Gender " +
                           "FROM Siswa S " +
                           "INNER JOIN Transaksi T ON S.NIS = T.NIS " +
                           "INNER JOIN KeteranganTransaksi KT ON T.NomorTransaksi = KT.NomorTransaksi " +
                           "WHERE KT.Keterangan IN (" + String.join(",", selectedCheckboxes) + ") " +
                           "GROUP BY S.NIS, S.Nama, S.Gender " +
                           "HAVING COUNT(DISTINCT KT.Keterangan) = " + selectedCheckboxes.size();

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                // Execute your query and process the results as needed
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
                    tableModel.setRowCount(0);

                    while (resultSet.next()) {
                        String nis = resultSet.getString("NIS");
                        String nama = resultSet.getString("Nama");
                        String gender = resultSet.getString("Gender");

                        Object[] rowData = {nis, nama, gender};
                        tableModel.addRow(rowData);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}


 private void searchAndDisplaySiswa(String keyword) {
    // Lakukan koneksi ke database dan eksekusi query pencarian
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String query = "SELECT NIS, Nama, Gender FROM Siswa WHERE Nama LIKE ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, "%" + keyword + "%");

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
                tableModel.setRowCount(0); 

                while (resultSet.next()) {
                    String nis = resultSet.getString("NIS");
                    String nama = resultSet.getString("Nama");
                    String gender = resultSet.getString("Gender");

                    Object[] rowData = {nis, nama, gender};
                    tableModel.addRow(rowData);
                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}

    
    private void searchAndDisplayOrtu(String keyword) {
    // Lakukan koneksi ke database dan eksekusi query pencarian
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String query = "SELECT OrangTua.ID, OrangTua.NIS, Siswa.Nama AS NamaSiswa, OrangTua.NamaAyah, OrangTua.NamaIbu " +
                       "FROM OrangTua " +
                       "JOIN Siswa ON OrangTua.NIS = Siswa.NIS WHERE OrangTua.NamaAyah LIKE ? OR OrangTua.NamaIbu LIKE ?";        
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            String keywordPattern = "%" + keyword + "%";
            preparedStatement.setString(1, keywordPattern);
            preparedStatement.setString(2, keywordPattern);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
                tableModel.setRowCount(0); 

                while (resultSet.next()) {
                    int id = resultSet.getInt("ID");
                    String namaSiswa = resultSet.getString("NamaSiswa");
                    String namaAyah = resultSet.getString("NamaAyah");
                    String namaIbu = resultSet.getString("NamaIbu");

                    Object[] rowData = {id, namaSiswa, namaAyah, namaIbu};
                    tableModel.addRow(rowData);
                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}
    
    private void searchAndDisplayTransaksi(String studentName){
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String query = "SELECT Transaksi.NIS, Siswa.Nama AS NamaSiswa, Transaksi.NomorTransaksi, Transaksi.JumlahUang " +
                       "FROM Transaksi " +
                       "JOIN Siswa ON Transaksi.NIS = Siswa.NIS " +
                       "WHERE Siswa.Nama LIKE ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, "%" + studentName + "%");
            
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                DefaultTableModel model = new NonEditableTableModel();
                model.addColumn("Nomor Transaksi");
                model.addColumn("Nama Siswa");
                model.addColumn("Jumlah Uang");

                while (resultSet.next()) {
                    Object[] row = {
                            resultSet.getInt("NomorTransaksi"),
                            resultSet.getString("NamaSiswa"),
                            resultSet.getBigDecimal("JumlahUang"),
                    };
                    model.addRow(row);
                }

                table.setModel(model);
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}


    
    private void displaySiswaData() throws SQLException {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String query = "SELECT * FROM Siswa";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            DefaultTableModel model = new NonEditableTableModel();
            model.addColumn("NIS");
            model.addColumn("Nama");
            model.addColumn("Gender");

            while (resultSet.next()) {
                Object[] row = {
                        resultSet.getString("NIS"),
                        resultSet.getString("Nama"),
                        resultSet.getString("Gender"),
                };
                model.addRow(row);
            }

            table.setModel(model);

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
        }
    }
    }
    
    private void displayOrangTuaData() throws SQLException {
 try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
   String query = "SELECT OrangTua.ID, OrangTua.NIS, Siswa.Nama AS NamaSiswa, OrangTua.NamaAyah, OrangTua.NamaIbu " +
                       "FROM OrangTua " +
                       "JOIN Siswa ON OrangTua.NIS = Siswa.NIS";
    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
        try (ResultSet resultSet = preparedStatement.executeQuery()) {

            DefaultTableModel model = new NonEditableTableModel();
            model.addColumn("ID");
            model.addColumn("Nama Siswa");
            model.addColumn("Nama Ayah");
            model.addColumn("Nama Ibu");

            while (resultSet.next()) {
                Object[] row = {
                        resultSet.getInt("ID"),
                        resultSet.getString("NamaSiswa"),
                        resultSet.getString("NamaAyah"),
                        resultSet.getString("NamaIbu"),
                };
                model.addRow(row);
            }

            table.setModel(model);

        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
    }
    }
    
    private void displayTransaksiData() throws SQLException {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String query = "SELECT Transaksi.NIS, Siswa.Nama AS NamaSiswa, Transaksi.NomorTransaksi, Transaksi.JumlahUang " +
                       "FROM Transaksi " +
                       "JOIN Siswa ON Transaksi.NIS = Siswa.NIS";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            DefaultTableModel model = new NonEditableTableModel();
            model.addColumn("Nomor Transaksi");
            model.addColumn("Nama Siswa");
            model.addColumn("Jumlah Uang");

            while (resultSet.next()) {
                Object[] row = {
                        resultSet.getInt("NomorTransaksi"),
                        resultSet.getString("NamaSiswa"),
                        resultSet.getBigDecimal("JumlahUang"),
                };
                model.addRow(row);
            }

            table.setModel(model);

        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}

    
    private void fetchDataFromSiswaAndDisplayInDetailFrame(String nis) {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String query = "SELECT * FROM Siswa WHERE NIS = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, nis);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    Date tanggalLahir = resultSet.getDate("TanggalLahir");
                    // Assuming DetailFrame has methods to set all the data
                    DetailFrame.setNIS(resultSet.getString("NIS"));
                    DetailFrame.setNama(resultSet.getString("Nama"));
                    DetailFrame.setGender(resultSet.getString("Gender"));
                    DetailFrame.setTempat(resultSet.getString("Tempat"));
                    DetailFrame.setTanggalLahir(tanggalLahir);
                    DetailFrame.setAlamat(resultSet.getString("Alamat"));
                    DetailFrame.setNoTelp(resultSet.getString("noTelp"));
                    // Set other details as needed
                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}
    
    private void fetchDataFromOrtuAndDisplayInDetailFrame(int id) {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String query = "SELECT OrangTua.*, Siswa.Nama AS NamaSiswa " +
               "FROM OrangTua " +
               "JOIN Siswa ON OrangTua.NIS = Siswa.NIS " +
               "WHERE OrangTua.ID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    DetailOrtu.setNamaAyah(resultSet.getString("NamaAyah"));                    
                    DetailOrtu.setKerjaAyah(resultSet.getString("KerjaAyah"));
                    DetailOrtu.setNamaIbu(resultSet.getString("NamaIbu"));
                    DetailOrtu.setKerjaIbu(resultSet.getString("KerjaIbu"));
                    DetailOrtu.setNamaSiswa(resultSet.getString("NamaSiswa"));

                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}
    
    private void fetchKeteranganTransaksiAndDisplayInDetailTransaksiFrame(int nomorTransaksi) {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String query = "SELECT * FROM KeteranganTransaksi WHERE NomorTransaksi = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, nomorTransaksi);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                DefaultTableModel model = new DefaultTableModel();
                model.addColumn("ID");
                model.addColumn("NomorTransaksi");
                model.addColumn("JumlahUang");
                model.addColumn("Keterangan");

                while (resultSet.next()) {
                    Object[] row = {
                            resultSet.getInt("ID"),
                            resultSet.getInt("NomorTransaksi"),
                            resultSet.getBigDecimal("JumlahUang"),
                            resultSet.getString("Keterangan")
                    };
                    model.addRow(row);
                }
                DetailTransaksi.setModel(model);
            }
        }
        
        String query2 = "SELECT Transaksi.*, Siswa.Nama AS NamaSiswa FROM Transaksi " +
                 "JOIN Siswa ON Transaksi.NIS = Siswa.NIS " +
                 "WHERE Transaksi.NomorTransaksi = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query2)) {
            preparedStatement.setInt(1, nomorTransaksi);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    Date tanggal = resultSet.getDate("TanggalBayar");
                    DetailTransaksi.setNama(resultSet.getString("NamaSiswa"));
                    DetailTransaksi.setPembayar(resultSet.getString("Pembayar"));                    
                    DetailTransaksi.setPenerima(resultSet.getString("Penerima"));
                    DetailTransaksi.setTanggal(tanggal);

                    // Set other details as needed
                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}


    
    private void deleteSiswaFromDatabase(String nis) {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String deleteOrangTuaQuery = "DELETE FROM OrangTua WHERE NIS = ?";
        try (PreparedStatement deleteOrangTuaStatement = connection.prepareStatement(deleteOrangTuaQuery)) {
            deleteOrangTuaStatement.setString(1, nis);
            deleteOrangTuaStatement.executeUpdate();
        }
        
        String deleteKeteranganQuery = "DELETE FROM KeteranganTransaksi WHERE NomorTransaksi IN (SELECT NomorTransaksi FROM Transaksi WHERE NIS = ?)";
        try (PreparedStatement deleteKeteranganStatement = connection.prepareStatement(deleteKeteranganQuery)) {
            deleteKeteranganStatement.setString(1, nis);
            deleteKeteranganStatement.executeUpdate();
        }
        
        String deleteTransaksiQuery = "DELETE FROM Transaksi WHERE NIS = ?";
        try (PreparedStatement deleteTransaksiStatement = connection.prepareStatement(deleteTransaksiQuery)) {
            deleteTransaksiStatement.setString(1, nis);
            deleteTransaksiStatement.executeUpdate();
        }
        
        String deleteQuery = "DELETE FROM Siswa WHERE NIS = ?";
        try (PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery)) {
            deleteStatement.setString(1,nis);
            int affectedRows = deleteStatement.executeUpdate();
            if (affectedRows > 0) {
                JOptionPane.showMessageDialog(this,"Baris dihapus dari database.");
            } else {
                JOptionPane.showMessageDialog(this,"Gagal menghapus baris dari database atau baris tidak ditemukan.");
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}
    
    private void deleteOrangTuaFromDatabase(int id) {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String deleteOrangTuaQuery = "DELETE FROM OrangTua WHERE ID = ?";
        try (PreparedStatement deleteOrangTuaStatement = connection.prepareStatement(deleteOrangTuaQuery)) {
            deleteOrangTuaStatement.setInt(1, id);
            int affectedRows = deleteOrangTuaStatement.executeUpdate();
            if (affectedRows > 0) {
                JOptionPane.showMessageDialog(this,"Baris dihapus dari database.");
            } else {
                JOptionPane.showMessageDialog(this,"Gagal menghapus baris dari database atau baris tidak ditemukan.");
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}
    
    private void deleteTransaksiFromDatabase(int nomorTransaksi) {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String deleteKeteranganQuery = "DELETE FROM KeteranganTransaksi WHERE NomorTransaksi = ?";
        try (PreparedStatement deleteKeteranganStatement = connection.prepareStatement(deleteKeteranganQuery)) {
            deleteKeteranganStatement.setInt(1, nomorTransaksi);
            deleteKeteranganStatement.executeUpdate();
        }
        
        String deleteTransaksiQuery = "DELETE FROM Transaksi WHERE NomorTransaksi = ?";
        try (PreparedStatement deleteTransaksiStatement = connection.prepareStatement(deleteTransaksiQuery)) {
            deleteTransaksiStatement.setInt(1, nomorTransaksi);
            int affectedRows = deleteTransaksiStatement.executeUpdate();
            if (affectedRows > 0) {
                JOptionPane.showMessageDialog(this,"Baris dihapus dari database.");
            } else {
                JOptionPane.showMessageDialog(this,"Gagal menghapus baris dari database atau baris tidak ditemukan.");
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}
    
    private void fetchDataFromSiswaAndDisplayInEditFrame(String nis) {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String query = "SELECT * FROM Siswa WHERE NIS = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, nis);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    Date tanggalLahir = resultSet.getDate("TanggalLahir");
                    // Assuming DetailFrame has methods to set all the data
                    EditSiswa.setNIS(resultSet.getString("NIS"));
                    EditSiswa.setNama(resultSet.getString("Nama"));
                    EditSiswa.setGender(resultSet.getString("Gender"));
                    EditSiswa.setTempat(resultSet.getString("Tempat"));
                    EditSiswa.setTanggalLahir(tanggalLahir);
                    EditSiswa.setAlamat(resultSet.getString("Alamat"));
                    EditSiswa.setNoTelp(resultSet.getString("noTelp"));
                    // Set other details as needed
                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}
    
    private void fetchDataFromOrtuAndDisplayInEditFrame(int id) {
    try (Connection connection = DriverManager.getConnection(JDBC_URL, USER, PASSWORD)) {
        String query = "SELECT OrangTua.*, Siswa.Nama AS NamaSiswa " +
               "FROM OrangTua " +
               "JOIN Siswa ON OrangTua.NIS = Siswa.NIS " +
               "WHERE OrangTua.ID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, id);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    EditOrtu.setId(resultSet.getInt("ID"));
                    EditOrtu.setNamaAyah(resultSet.getString("NamaAyah"));                    
                    EditOrtu.setKerjaAyah(resultSet.getString("KerjaAyah"));
                    EditOrtu.setNamaIbu(resultSet.getString("NamaIbu"));
                    EditOrtu.setKerjaIbu(resultSet.getString("KerjaIbu"));
                    EditOrtu.setNamaSiswa(resultSet.getString("NamaSiswa"));

                }
            }
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, ex, "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
}
     
    public static void main(String args[]) {
    /* Set look and feel, other UI configurations */

    Dewantara frame = new Dewantara();
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            frame.setVisible(true); // Menampilkan GUI
        }
    });
    
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apply;
    private javax.swing.JRadioButton buku;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton clear;
    private javax.swing.JButton create;
    private javax.swing.JRadioButton daftarUlang;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JLabel filter;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JRadioButton pendaftaran;
    private javax.swing.JButton refresh;
    private javax.swing.JTextField search;
    private javax.swing.JRadioButton seragam;
    private javax.swing.JRadioButton spp;
    private javax.swing.JTable table;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables
}
